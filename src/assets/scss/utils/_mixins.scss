// px to rem
@function rem($pixels, $context: $font-size) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1rem;
}

@mixin size($width,$height: $width) {
  width: $width;
  height: $height;
  display: flex;
}

// z-index
@function z($name, $z-indexes-list: $z-indexes) {
  @if index($z-indexes-list, $name) {
    @return (length($z-indexes-list) - index($z-indexes-list, $name)) + 1;
  } @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes-list}';

    @return null;
  }
}

// List
$z-indexes: (
  'modal',
  'site-nav',
  'site-header',
  'site-content',
  'site-bg-content',
  'site-footer'
);

//elements align
@mixin align($v: true, $h: false, $position: relative) {
  @if $position {
    position: $position;
  }
  @if $v {
    top: 50%;
  }
  @if $h {
    left: 50%;
  }

  @if $v and $h {
    transform: translateX(-50%) translateY(-50%);
  } @else if $v {
    transform: translateY(-50%);
  } @else {
    transform: translateX(-50%);
  }
}



@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top : bottom,
    to top right : bottom left,
    to right top : left bottom,
    to right : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom : top,
    to bottom left : top right,
    to left bottom : right top,
    to left : right,
    to left top : right bottom,
    to top left : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@mixin position($position, $t: null,$l: null, $r: null, $b: null ) {
  @if ($position == a) {
    position: absolute;
  } @else if ($position == r) {
    position: relative;
  } @else if ($position == f) {
    position: fixed;
  } @else {
    position: unset;
  }
  top: $t;
  right: $r;
  bottom: $b;
  left: $l;
}

@mixin align($c: null,$h: null, $v: null,) {
  position: absolute;
  @if ($c) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($h) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($v) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

@mixin pseudoElement($width,$url: null) {
  content: '';
  display: block;
  position: absolute;
  @include size($width);
  @if ($url != null) {
    background-image: url($url);
    background-size: cover;
    background-repeat: no-repeat;
  }
}

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
  position: $position;
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round( $size / 2.5 );
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round( $size / 2.5 );
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}


//Old media mixin
//MEdia queries
@mixin mediaQueriesFor($size) {
  @if $size == mobile {
    @media screen and (max-width: $phoneWidth) {
      @content;
    }
  } @else if $size == tablet-normal {
    @media screen and (max-width: $tableWidth) {
      @content;
    }
  } @else if $size == tablet-max {
    @media screen and (max-width: $smDesktopWidth) {
      @content;
    }
  } @else if $size == desktop {
    @media screen and (max-width: $desktopWidth) {
      @content;
    }
  } @else if $size == desktop-only {
    @media screen and (min-width: $desktopWidth) {
      @content;
    }
  } @else {
    @media screen and (min-width: $size) {
      @content;
    }
  }
}

